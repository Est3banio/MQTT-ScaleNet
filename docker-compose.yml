version: '3.8'

services:
  # MQTT Broker
  mqtt-broker:
    build: ./broker
    container_name: mqtt-broker
    ports:
      - "1883:1883"  # MQTT port
      - "9001:9001"  # WebSockets port
    volumes:
      - mosquitto-data:/mosquitto/data
      - mosquitto-log:/mosquitto/log
    networks:
      - mqtt_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$(hostname)/healthcheck", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Java Sinus Publisher 1
  java-publisher-1:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: java-publisher-1
    depends_on:
      - mqtt-broker
    environment:
      - MQTT_BROKER=tcp://mqtt-broker:1883
      - MQTT_PUB_TOPIC=sensoren/java1
      - MQTT_SUB_TOPIC=feedback/java1
    networks:
      - mqtt_network
    restart: unless-stopped

  # Java Sinus Publisher 2
  java-publisher-2:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: java-publisher-2
    depends_on:
      - mqtt-broker
    environment:
      - MQTT_BROKER=tcp://mqtt-broker:1883
      - MQTT_PUB_TOPIC=sensoren/java2
      - MQTT_SUB_TOPIC=feedback/java2
    networks:
      - mqtt_network
    restart: unless-stopped

  # Python Sinus Publisher
  python-publisher:
    build: ./python-publisher
    container_name: python-publisher
    depends_on:
      - mqtt-broker
    environment:
      - MQTT_BROKER=mqtt-broker
      - MQTT_PUB_TOPIC=sensoren/python1
      - MQTT_CLIENT_ID=PythonPublisher
    networks:
      - mqtt_network
    restart: unless-stopped

  # Temperature Publisher
  temp-publisher:
    build: ./python-temp-publisher
    container_name: temp-publisher
    depends_on:
      - mqtt-broker
    environment:
      - MQTT_BROKER=mqtt-broker
      - MQTT_PUB_TOPIC=sensoren/temperature
      - MQTT_FEEDBACK_TOPIC=feedback/temperature
      - BASE_TEMP=22.0
      - DAY_VARIATION=8.0
    networks:
      - mqtt_network
    restart: unless-stopped

  # Humidity Publisher
  humidity-publisher:
    build: ./python-humidity-publisher
    container_name: humidity-publisher
    depends_on:
      - mqtt-broker
    environment:
      - MQTT_BROKER=mqtt-broker
      - MQTT_PUB_TOPIC=sensoren/humidity
      - MQTT_FEEDBACK_TOPIC=feedback/humidity
      - BASE_HUMIDITY=65.0
    networks:
      - mqtt_network
    restart: unless-stopped

  # Data Processor
  data-processor:
    build: ./python-processor
    container_name: data-processor
    depends_on:
      - mqtt-broker
      - temp-publisher
      - humidity-publisher
    environment:
      - MQTT_BROKER=mqtt-broker
      - MQTT_TEMP_TOPIC=sensoren/temperature
      - MQTT_HUMIDITY_TOPIC=sensoren/humidity
      - MQTT_OUTPUT_TOPIC=sensoren/processed
      - MQTT_FEEDBACK_TOPIC=feedback/processor
      - PUBLISH_INTERVAL=1.0
    networks:
      - mqtt_network
    restart: unless-stopped

  # Python Subscriber for data monitoring
  python-subscriber:
    build: ./python-subscriber
    container_name: python-subscriber
    depends_on:
      - mqtt-broker
    environment:
      - MQTT_BROKER=mqtt-broker
      - MQTT_SUB_TOPIC=sensoren/+
      - MQTT_FEEDBACK_TOPIC=feedback/python1
      - MQTT_CLIENT_ID=PythonSubscriber
    networks:
      - mqtt_network
    restart: unless-stopped

  # MQTT Logger
  mqtt-logger:
    build: ./python-logger
    container_name: mqtt-logger
    depends_on:
      - mqtt-broker
    environment:
      - MQTT_BROKER=mqtt-broker
      - MQTT_TOPIC_FILTER=#
      - MQTT_FEEDBACK_TOPIC=feedback/logger
    volumes:
      - mqtt-logs:/app/logs
    networks:
      - mqtt_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - mqtt-broker
      - prometheus
    environment:
      - GF_INSTALL_PLUGINS=grafana-mqtt-datasource
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mqtt_network
    restart: unless-stopped

  # MQTT CLI for testing/debugging
  mqtt-cli:
    image: hivemq/mqtt-cli
    container_name: mqtt-cli
    depends_on:
      - mqtt-broker
    command: shell
    tty: true
    stdin_open: true
    networks:
      - mqtt_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alertmanager/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mqtt_network
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mqtt_network
    restart: unless-stopped
  
  # cAdvisor for container monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - mqtt_network
    restart: unless-stopped
    
  # MQTT Exporter for Mosquitto metrics
  mqtt-exporter:
    build: ./mqtt-exporter
    container_name: mqtt-exporter
    ports:
      - "9234:9234"
    depends_on:
      - mqtt-broker
    networks:
      - mqtt_network
    restart: unless-stopped
    
  # AlertManager for alerts handling
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - mqtt_network
    restart: unless-stopped

networks:
  mqtt_network:
    driver: bridge

volumes:
  mosquitto-data:
  mosquitto-log:
  grafana-storage:
  mqtt-logs:
  prometheus-data: